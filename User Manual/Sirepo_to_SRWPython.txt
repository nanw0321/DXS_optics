To add time domain simulation to the code generated by Sirepo:
	1. change all SRW module imports to from srwpy. import, for example:
		from srwpy import srwl_bl
		from srwpy import srwlib
		from srwpy import srwlpy
		from srwpy import math
		from srwpy import srwl_uti_smp

	2. change the following sampling parameters in [varParam---Calculation Types]:
		['gbm_st', 'f', <sigT>, 'rms pulse duration [s] (for intensity)'],
		['w_e', 'f', <-pulseRange*sigT/2>, 'photon energy [eV] for calculation of intensity distribution vs horizontal and vertical position'],
		['w_ef', 'f', <pulseRange*sigT/2>, 'final photon energy [eV] for calculation of intensity distribution vs horizontal and vertical position'],
		['w_ne', 'i', <nz>, 'number of points vs photon energy for calculation of intensity distribution'],
		['w_x', 'f', 0.0, 'central horizontal position [m] for calculation of intensity distribution'],
		['w_rx', 'f', <range_x>, 'range of horizontal position [m] for calculation of intensity distribution'],
		['w_nx', 'i', <nx>, 'number of points vs horizontal position for calculation of intensity distribution'],
		['w_y', 'f', 0.0, 'central vertical position [m] for calculation of intensity distribution vs horizontal and vertical position'],
		['w_ry', 'f', <range_y>, 'range of vertical position [m] for calculation of intensity distribution vs horizontal and vertical position'],
		['w_ny', 'i', <ny>, 'number of points vs vertical position for calculation of intensity distribution'],
		['w_smpf', 'f', <factor, used if >0>, 'sampling factor for calculation of intensity distribution vs horizontal and vertical position'],
		['w_meth', 'i', 2, 'method to use for calculation of intensity distribution vs horizontal and vertical position: 0- "manual", 1- "auto-undulator", 2- "auto-wiggler"'],
		['w_prec', 'f', 0.01, 'relative precision for calculation of intensity distribution vs horizontal and vertical position'],
		['w_ft', 's', 't', 'presentation/domain: "f"- frequency (photon energy), "t"- time'],
		['w_u', 'i', 2, 'electric field units: 0- arbitrary, 1- sqrt(Phot/s/0.1%bw/mm^2), 2- sqrt(J/eV/mm^2) or sqrt(W/mm^2), depending on representation (freq. or time)'],
		['si_pol', 'i', 6, 'polarization component to extract after calculation of intensity distribution: 0- Linear Horizontal, 1- Linear Vertical, 2- Linear 45 degrees, 3- Linear 135 degrees, 4- Circular Right, 5- Circular Left, 6- Total'],
		['si_type', 'i', 0, 'type of a characteristic to be extracted after calculation of intensity distribution: 0- Single-Electron Intensity, 1- Multi-Electron Intensity, 2- Single-Electron Flux, 3- Multi-Electron Flux, 4- Single-Electron Radiation Phase, 5- Re(E): Real part of Single-Electron Electric Field, 6- Im(E): Imaginary part of Single-Electron Electric Field, 7- Single-Electron Intensity, integrated over Time or Photon Energy'],
		['si_fn', 's', 'res_int_se.dat', 'file name for saving calculated single-e intensity distribution (without wavefront propagation through a beamline) vs horizontal and vertical position'],
		['si_pl', 's', '', 'plot the input intensity distributions in graph(s): ""- dont plot, "x"- vs horizontal position, "y"- vs vertical position, "xy"- vs horizontal and vertical position'],
		['ws_fni', 's', 'res_int_pr_se.dat', 'file name for saving propagated single-e intensity distribution vs horizontal and vertical position'],
		['ws_pl', 's', '', 'plot the resulting intensity distributions in graph(s): ""- dont plot, "x"- vs horizontal position, "y"- vs vertical position, "xy"- vs horizontal and vertical position'],

	3. the rest of variables in [varParam---Calculation Types] can be commented out, including:
		# Electron Trajectory
		#Single-Electron Spectrum vs Photon Energy
		#Multi-Electron Spectrum vs Photon Energy (taking into account e-beam emittance, energy spread and collection aperture size)
		#Power Density Distribution vs horizontal and vertical position

	4. change propagation parameters, especially the horizontal and vertical resolution and range.
		


To tune sampling parameters:
	1. Spatial: in the big parameter block, change range and resolution
	2. Temporal: in propagation block, through: srwlpy.ResizeElecField(wfr, 't', [0, 25., 1]) or srwlpy.ResizeElecField(wfr, 'f', [0, 3., 1.])








